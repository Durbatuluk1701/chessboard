[{"C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\App.jsx":"1","C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\BoardSpot.jsx":"2","C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\reportWebVitals.js":"3","C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\Chessboard.jsx":"4","C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\index.js":"5"},{"size":684,"mtime":1606709594158,"results":"6","hashOfConfig":"7"},{"size":17459,"mtime":1606709509527,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3011,"mtime":1606709317211,"results":"10","hashOfConfig":"7"},{"size":504,"mtime":1606628313602,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j1e3hl",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\App.jsx",[],"C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\BoardSpot.jsx",["23"],"const pieceTranslator = (pieceValue) => {\r\n    const translation = {\r\n        \"W\": {\r\n            \"K\": \"/ChessPieces/WhiteKing.png\",\r\n            \"Q\": \"/ChessPieces/WhiteQueen.png\",\r\n            \"B\": \"/ChessPieces/WhiteBishop.png\",\r\n            \"N\": \"/ChessPieces/WhiteKnight.png\",\r\n            \"R\": \"/ChessPieces/WhiteRook.png\",\r\n            \"P\": \"/ChessPieces/WhitePawn.png\"\r\n        },\r\n        \"B\": {\r\n            \"K\": \"/ChessPieces/BlackKing.png\",\r\n            \"Q\": \"/ChessPieces/BlackQueen.png\",\r\n            \"B\": \"/ChessPieces/BlackBishop.png\",\r\n            \"N\": \"/ChessPieces/BlackKnight.png\",\r\n            \"R\": \"/ChessPieces/BlackRook.png\",\r\n            \"P\": \"/ChessPieces/BlackPawn.png\"\r\n        }\r\n    }\r\n    let piecePart = pieceValue.split(\"_\");\r\n    return pieceValue.length > 2 ? translation[piecePart[0]][piecePart[1]] : \"/ChessPieces/Blank.png\";\r\n}\r\n\r\nexport const BoardSpot = ({ board, piece, index, move, turn, setTurn, prevIndex, setPrevIndex }) => {\r\n    let currentBackground = ((index + Math.floor(index / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n\r\n    const possibleMoves = (pieceValue, index) => {\r\n        let validIndexes = [];\r\n        let myPiece = pieceValue[0];\r\n        let enemyPiece = myPiece === \"W\" ? \"B\" : \"W\";\r\n        switch (pieceValue[2]) {\r\n            case \"P\":\r\n                // First move!\r\n                let firstMove = myPiece === \"W\" ? index > 47 : index < 15;\r\n                if (firstMove) {\r\n                    let move2 = myPiece === \"W\" ? index - 16 : index + 16;\r\n                    if (board[move2][0] === \" \") {\r\n                        validIndexes.push(move2);\r\n                    }\r\n                }\r\n                // Only can move straight forward if empty\r\n                let move1 = myPiece === \"W\" ? index - 8 : index + 8;\r\n                if (board[move1][0] === \" \") {\r\n                    validIndexes.push(move1);\r\n                }\r\n                // Check attack Down Right\r\n                let attack1 = myPiece === \"W\" ? index - 9 : index + 9;\r\n                if (board[attack1][0] === enemyPiece) {\r\n                    validIndexes.push(attack1);\r\n                }\r\n                // Check attack down left\r\n                let attack2 = myPiece === \"W\" ? index - 7 : index + 7;\r\n                if (board[attack2][0] === enemyPiece) {\r\n                    validIndexes.push(attack2);\r\n                }\r\n                break;\r\n            case \"R\":\r\n                let rookIndex = index;\r\n                // Going down\r\n                while (rookIndex < 56) {\r\n                    if (board[rookIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 8);\r\n                    rookIndex += 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going up\r\n                while (rookIndex > 7) {\r\n                    if (board[rookIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 8);\r\n                    rookIndex -= 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going left\r\n                while (rookIndex % 8 !== 0 && rookIndex < 64) {\r\n                    if (board[rookIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 1);\r\n                    rookIndex -= 1;\r\n                }\r\n                rookIndex = index;\r\n                // Going right\r\n                while (rookIndex % 8 !== 7 && rookIndex >= 0) {\r\n                    if (board[rookIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 1);\r\n                    rookIndex += 1;\r\n                }\r\n                break;\r\n            case \"B\":\r\n                // Down + Right\r\n                let bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 9);\r\n                    bishopIndex += 9;\r\n                }\r\n                // Down + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 7);\r\n                    bishopIndex += 7;\r\n                }\r\n                // Up + Right\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 7);\r\n                    bishopIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 9);\r\n                    bishopIndex -= 9;\r\n                }\r\n                break;\r\n            case \"N\":\r\n                let knightIndex = index;\r\n                let dd = knightIndex < 48;\r\n                let uu = knightIndex > 15;\r\n                let ll = (knightIndex % 8 !== 0 && knightIndex % 8 !== 1)\r\n                let rr = (knightIndex % 8 !== 6 && knightIndex % 8 !== 7)\r\n                let d = knightIndex < 56;\r\n                let u = knightIndex > 7;\r\n                let l = knightIndex % 8 !== 0;\r\n                let r = knightIndex % 8 !== 7;\r\n                // DDR\r\n                if (dd && r) {\r\n                    if (board[index + 17][0] !== myPiece) {\r\n                        validIndexes.push(index + 17);\r\n                    }\r\n                }\r\n                // DDL\r\n                if (dd && l) {\r\n                    if (board[index + 15][0] !== myPiece) {\r\n                        validIndexes.push(index + 15);\r\n                    }\r\n                }\r\n                // DLL\r\n                if (d & ll) {\r\n                    if (board[index + 6][0] !== myPiece) {\r\n                        validIndexes.push(index + 6);\r\n                    }\r\n                }\r\n                // DRR\r\n                if (d && rr) {\r\n                    if (board[index + 10][0] !== myPiece) {\r\n                        validIndexes.push(index + 10);\r\n                    }\r\n                }\r\n                // UUR\r\n                if (uu && r) {\r\n                    if (board[index - 15][0] !== myPiece) {\r\n                        validIndexes.push(index - 15);\r\n                    }\r\n                }\r\n                // UUL\r\n                if (uu && l) {\r\n                    if (board[index - 17][0] !== myPiece) {\r\n                        validIndexes.push(index - 17);\r\n                    }\r\n                }\r\n                // ULL\r\n                if (u && ll) {\r\n                    if (board[index - 10][0] !== myPiece) {\r\n                        validIndexes.push(index - 10);\r\n                    }\r\n                }\r\n                // URR\r\n                if (u && rr) {\r\n                    if (board[index - 6][0] !== myPiece) {\r\n                        validIndexes.push(index - 6);\r\n                    }\r\n                }\r\n                break;\r\n            case \"Q\":\r\n                let queenIndex = index;\r\n                // Going down\r\n                while (queenIndex < 56) {\r\n                    if (board[queenIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 8);\r\n                    queenIndex += 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going up\r\n                while (queenIndex > 7) {\r\n                    if (board[queenIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 8);\r\n                    queenIndex -= 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going left\r\n                while (queenIndex % 8 !== 0 && queenIndex < 64) {\r\n                    if (board[queenIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 1);\r\n                    queenIndex -= 1;\r\n                }\r\n                queenIndex = index;\r\n                // Going right\r\n                while (queenIndex % 8 !== 7 && queenIndex >= 0) {\r\n                    if (board[queenIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 1);\r\n                    queenIndex += 1;\r\n                }\r\n                // Down + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex < 56) {\r\n                    if (board[queenIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 9);\r\n                    queenIndex += 9;\r\n                }\r\n                // Down + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex < 56) {\r\n                    if (board[queenIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 7);\r\n                    queenIndex += 7;\r\n                }\r\n                // Up + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex > 7) {\r\n                    if (board[queenIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 7);\r\n                    queenIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex > 7) {\r\n                    if (board[queenIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 9);\r\n                    queenIndex -= 9;\r\n                }\r\n                break;\r\n            case \"K\":\r\n                // UU\r\n                if (index > 7) {\r\n                    if (board[index - 8][0] !== myPiece) {\r\n                        validIndexes.push(index - 8);\r\n                    }\r\n                }\r\n                // UR\r\n                if (index > 7 && index % 8 !== 7) {\r\n                    if (board[index - 7][0] !== myPiece) {\r\n                        validIndexes.push(index - 7);\r\n                    }\r\n                }\r\n                // RR\r\n                if (index % 8 !== 7) {\r\n                    if (board[index + 1][0] !== myPiece) {\r\n                        validIndexes.push(index + 1);\r\n                    }\r\n                }\r\n                // DR\r\n                if (index < 56 && index % 8 !== 7) {\r\n                    if (board[index + 9][0] !== myPiece) {\r\n                        validIndexes.push(index + 9);\r\n                    }\r\n                }\r\n                // DD\r\n                if (index < 56) {\r\n                    if (board[index + 8][0] !== myPiece) {\r\n                        validIndexes.push(index + 8);\r\n                    }\r\n                }\r\n                // DL\r\n                if (index < 56 && index % 8 !== 0) {\r\n                    if (board[index + 7][0] !== myPiece) {\r\n                        validIndexes.push(index + 7);\r\n                    }\r\n                }\r\n                // LL\r\n                if (index % 8 !== 0) {\r\n                    if (board[index - 1][0] !== myPiece) {\r\n                        validIndexes.push(index - 1);\r\n                    }\r\n                }\r\n                // UL\r\n                if (index > 7 && index % 8 !== 0) {\r\n                    if (board[index - 9][0] !== myPiece) {\r\n                        validIndexes.push(index - 9);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                alert(\"RED ALERT\");\r\n        }\r\n        return validIndexes;\r\n    }\r\n\r\n    const pickMovement = (end) => {\r\n        move(index, end);\r\n        setTurn(turn === \"W\" ? \"B\" : \"W\");\r\n    }\r\n\r\n    const toggleBackground = (indexes) => {\r\n        indexes.forEach((value) => {\r\n            let spot = document.getElementById(`boardSpot${value}`);\r\n            spot.style.backgroundColor = \"yellow\";\r\n            spot.onclick = () => {\r\n                pickMovement(value);\r\n                resetBackground(indexes);\r\n            }\r\n        })\r\n    }\r\n\r\n    const resetBackground = (indexes) => {\r\n        indexes.forEach((value) => {\r\n            let spot = document.getElementById(`boardSpot${value}`);\r\n            spot.style.backgroundColor = ((value + Math.floor(value / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n            spot.onclick = clickPiece;\r\n        })\r\n    }\r\n\r\n    const clickPiece = () => {\r\n        resetBackground(prevIndex);\r\n        if (turn === piece[0]) {\r\n            let valid = possibleMoves(piece, index);\r\n            if (valid.length === 0) {\r\n                alert(\"Cannot move that piece\");\r\n                return;\r\n            }\r\n            setPrevIndex(valid);\r\n            toggleBackground(valid);\r\n            // let userMove = prompt(\"Valid Moves: \" + valid.map(indexToValue));\r\n            // console.log(userMove);\r\n            // userMove = valueToIndex(userMove);\r\n            // console.log(userMove);\r\n            // if (valid.includes(userMove)) {\r\n            //     move(index, userMove);\r\n            // } else {\r\n            //     alert(\"Invalid Choice\");\r\n            //     return;\r\n            // }\r\n            // setTurn(turn === \"W\" ? \"B\" : \"W\");\r\n            // resetBackground(valid);\r\n        } else {\r\n            if (piece[0] === \" \") {\r\n                alert(\"Cannot Move Nothing\");\r\n            } else {\r\n                // alert(\"Not your turn!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id={`boardSpot${index}`}\r\n            style={{\r\n                width: \"12.5%\",\r\n                textAlign: \"center\",\r\n                margin: \"0px\",\r\n                backgroundColor: currentBackground\r\n            }} >\r\n            <img width=\"100%\" height=\"100%\" src={pieceTranslator(piece)} onClick={clickPiece} />\r\n        </div >\r\n    )\r\n}","C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\reportWebVitals.js",[],"C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\Chessboard.jsx",[],"C:\\Users\\30wth\\source\\repos\\KU\\EECS368\\chessboard\\src\\index.js",[],{"ruleId":"24","severity":1,"message":"25","line":434,"column":13,"nodeType":"26","endLine":434,"endColumn":97},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]