{"version":3,"sources":["BoardSpot.jsx","Chessboard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["pieceTranslator","pieceValue","piecePart","split","length","BoardSpot","board","piece","index","move","turn","setTurn","currentBackground","Math","floor","indexToValue","0","1","2","3","4","5","6","7","id","style","width","textAlign","margin","backgroundColor","height","src","onClick","valid","validIndexes","myPiece","enemyPiece","move2","push","move1","attack1","attack2","rookIndex","bishopIndex","dd","uu","ll","rr","d","u","l","r","queenIndex","alert","possibleMoves","console","log","userMove","prompt","map","value","Number","e","error","valueToIndex","includes","Chessboard","useState","tempBoard","Array","fill","fillBoard","setBoard","movePiece","start","end","display","flexDirection","flexWrap","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83bd6eeb.chunk.js","sourcesContent":["const pieceTranslator = (pieceValue) => {\r\n    const translation = {\r\n        \"W\": {\r\n            \"K\": \"/ChessPieces/WhiteKing.png\",\r\n            \"Q\": \"/ChessPieces/WhiteQueen.png\",\r\n            \"B\": \"/ChessPieces/WhiteBishop.png\",\r\n            \"N\": \"/ChessPieces/WhiteKnight.png\",\r\n            \"R\": \"/ChessPieces/WhiteRook.png\",\r\n            \"P\": \"/ChessPieces/WhitePawn.png\"\r\n        },\r\n        \"B\": {\r\n            \"K\": \"/ChessPieces/BlackKing.png\",\r\n            \"Q\": \"/ChessPieces/BlackQueen.png\",\r\n            \"B\": \"/ChessPieces/BlackBishop.png\",\r\n            \"N\": \"/ChessPieces/BlackKnight.png\",\r\n            \"R\": \"/ChessPieces/BlackRook.png\",\r\n            \"P\": \"/ChessPieces/BlackPawn.png\"\r\n        }\r\n    }\r\n    let piecePart = pieceValue.split(\"_\");\r\n    return pieceValue.length > 2 ? translation[piecePart[0]][piecePart[1]] : \"/ChessPieces/Blank.png\";\r\n}\r\n\r\nexport const BoardSpot = ({ board, piece, index, move, turn, setTurn }) => {\r\n    let currentBackground = ((index + Math.floor(index / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n\r\n    const possibleMoves = (pieceValue, index) => {\r\n        let validIndexes = [];\r\n        let myPiece = pieceValue[0];\r\n        let enemyPiece = myPiece === \"W\" ? \"B\" : \"W\";\r\n        switch (pieceValue[2]) {\r\n            case \"P\":\r\n                // First move!\r\n                let firstMove = myPiece === \"W\" ? index > 15 : index < 47;\r\n                if (firstMove) {\r\n                    let move2 = myPiece === \"W\" ? index - 16 : index + 16;\r\n                    if (board[move2][0] === \" \") {\r\n                        validIndexes.push(move2);\r\n                    }\r\n                }\r\n                // Only can move straight forward if empty\r\n                let move1 = myPiece === \"W\" ? index - 8 : index + 8;\r\n                if (board[move1][0] === \" \") {\r\n                    validIndexes.push(move1);\r\n                }\r\n                // Check attack Down Right\r\n                let attack1 = myPiece === \"W\" ? index - 9 : index + 9;\r\n                if (board[attack1][0] === enemyPiece) {\r\n                    validIndexes.push(attack1);\r\n                }\r\n                // Check attack down left\r\n                let attack2 = myPiece === \"W\" ? index - 7 : index + 7;\r\n                if (board[attack2][0] === enemyPiece) {\r\n                    validIndexes.push(attack2);\r\n                }\r\n                break;\r\n            case \"R\":\r\n                let rookIndex = index;\r\n                // Going down\r\n                while (rookIndex < 56) {\r\n                    if (board[rookIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 8);\r\n                    rookIndex += 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going up\r\n                while (rookIndex > 7) {\r\n                    if (board[rookIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 8);\r\n                    rookIndex -= 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going left\r\n                while (rookIndex % 8 !== 0 && rookIndex < 64) {\r\n                    if (board[rookIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 1);\r\n                    rookIndex -= 1;\r\n                }\r\n                rookIndex = index;\r\n                // Going right\r\n                while (rookIndex % 8 !== 7 && rookIndex >= 0) {\r\n                    if (board[rookIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 1);\r\n                    rookIndex += 1;\r\n                }\r\n                break;\r\n            case \"B\":\r\n                // Down + Right\r\n                let bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 9);\r\n                    bishopIndex += 9;\r\n                }\r\n                // Down + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 7);\r\n                    bishopIndex += 7;\r\n                }\r\n                // Up + Right\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 7);\r\n                    bishopIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 9);\r\n                    bishopIndex -= 9;\r\n                }\r\n                break;\r\n            case \"N\":\r\n                let knightIndex = index;\r\n                let dd = knightIndex < 48;\r\n                let uu = knightIndex > 15;\r\n                let ll = (knightIndex % 8 !== 0 && knightIndex % 8 !== 1)\r\n                let rr = (knightIndex % 8 !== 6 && knightIndex % 8 !== 7)\r\n                let d = knightIndex < 56;\r\n                let u = knightIndex > 7;\r\n                let l = knightIndex % 8 !== 0;\r\n                let r = knightIndex % 8 !== 7;\r\n                // DDR\r\n                if (dd && r) {\r\n                    if (board[index + 17][0] !== myPiece) {\r\n                        validIndexes.push(index + 17);\r\n                    }\r\n                }\r\n                // DDL\r\n                if (dd && l) {\r\n                    if (board[index + 15][0] !== myPiece) {\r\n                        validIndexes.push(index + 15);\r\n                    }\r\n                }\r\n                // DLL\r\n                if (d & ll) {\r\n                    if (board[index + 6][0] !== myPiece) {\r\n                        validIndexes.push(index + 6);\r\n                    }\r\n                }\r\n                // DRR\r\n                if (d && rr) {\r\n                    if (board[index + 10][0] !== myPiece) {\r\n                        validIndexes.push(index + 10);\r\n                    }\r\n                }\r\n                // UUR\r\n                if (uu && r) {\r\n                    if (board[index - 15][0] !== myPiece) {\r\n                        validIndexes.push(index - 15);\r\n                    }\r\n                }\r\n                // UUL\r\n                if (uu && l) {\r\n                    if (board[index - 17][0] !== myPiece) {\r\n                        validIndexes.push(index - 17);\r\n                    }\r\n                }\r\n                // ULL\r\n                if (u && ll) {\r\n                    if (board[index - 10][0] !== myPiece) {\r\n                        validIndexes.push(index - 10);\r\n                    }\r\n                }\r\n                // URR\r\n                if (u && rr) {\r\n                    if (board[index - 6][0] !== myPiece) {\r\n                        validIndexes.push(index - 6);\r\n                    }\r\n                }\r\n                break;\r\n            case \"Q\":\r\n                let queenIndex = index;\r\n                // Going down\r\n                while (queenIndex < 56) {\r\n                    if (board[queenIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 8);\r\n                    queenIndex += 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going up\r\n                while (queenIndex > 7) {\r\n                    if (board[queenIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 8);\r\n                    queenIndex -= 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going left\r\n                while (queenIndex % 8 !== 0 && queenIndex < 64) {\r\n                    if (board[queenIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 1);\r\n                    queenIndex -= 1;\r\n                }\r\n                queenIndex = index;\r\n                // Going right\r\n                while (queenIndex % 8 !== 7 && queenIndex >= 0) {\r\n                    if (board[queenIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 1);\r\n                    queenIndex += 1;\r\n                }\r\n                // Down + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex < 56) {\r\n                    if (board[queenIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 9);\r\n                    queenIndex += 9;\r\n                }\r\n                // Down + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex < 56) {\r\n                    if (board[queenIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 7);\r\n                    queenIndex += 7;\r\n                }\r\n                // Up + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex > 7) {\r\n                    if (board[queenIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 7);\r\n                    queenIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex > 7) {\r\n                    if (board[queenIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 9);\r\n                    queenIndex -= 9;\r\n                }\r\n                break;\r\n            case \"K\":\r\n                // UU\r\n                if (index > 7) {\r\n                    if (board[index - 8][0] !== myPiece) {\r\n                        validIndexes.push(index - 8);\r\n                    }\r\n                }\r\n                // UR\r\n                if (index > 7 && index % 8 !== 7) {\r\n                    if (board[index - 7][0] !== myPiece) {\r\n                        validIndexes.push(index - 7);\r\n                    }\r\n                }\r\n                // RR\r\n                if (index % 8 !== 7) {\r\n                    if (board[index + 1][0] !== myPiece) {\r\n                        validIndexes.push(index + 1);\r\n                    }\r\n                }\r\n                // DR\r\n                if (index < 56 && index % 8 !== 7) {\r\n                    if (board[index + 9][0] !== myPiece) {\r\n                        validIndexes.push(index + 9);\r\n                    }\r\n                }\r\n                // DD\r\n                if (index < 56) {\r\n                    if (board[index + 8][0] !== myPiece) {\r\n                        validIndexes.push(index + 8);\r\n                    }\r\n                }\r\n                // DL\r\n                if (index < 56 && index % 8 !== 0) {\r\n                    if (board[index + 7][0] !== myPiece) {\r\n                        validIndexes.push(index + 7);\r\n                    }\r\n                }\r\n                // LL\r\n                if (index % 8 !== 0) {\r\n                    if (board[index - 1][0] !== myPiece) {\r\n                        validIndexes.push(index - 1);\r\n                    }\r\n                }\r\n                // UL\r\n                if (index > 7 && index % 8 !== 0) {\r\n                    if (board[index - 9][0] !== myPiece) {\r\n                        validIndexes.push(index - 9);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                alert(\"RED ALERT\");\r\n        }\r\n        return validIndexes;\r\n    }\r\n\r\n    const indexToValue = (index) => {\r\n        let translation = {\r\n            0: \"a\",\r\n            1: \"b\",\r\n            2: \"c\",\r\n            3: \"d\",\r\n            4: \"e\",\r\n            5: \"f\",\r\n            6: \"g\",\r\n            7: \"h\"\r\n        }\r\n        return `${translation[index % 8]}${Math.floor((64 - index) / 8) + 1}`;\r\n    }\r\n\r\n    const valueToIndex = (value) => {\r\n        let translation = {\r\n            \"a\": 7,\r\n            \"b\": 6,\r\n            \"c\": 5,\r\n            \"d\": 4,\r\n            \"e\": 3,\r\n            \"f\": 2,\r\n            \"g\": 1,\r\n            \"h\": 0\r\n        }\r\n        try {\r\n            return (value[1] - 1) * 8 + Number(translation[value[0]]);\r\n        } catch (e) {\r\n            console.error(e);\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // const toggleBackground = (indexes) => {\r\n    //     indexes.forEach((value) => {\r\n    //         document.getElementById(`boardSpot${value}`).style.backgroundColor = \"yellow\";\r\n    //     })\r\n    // }\r\n\r\n    // const resetBackground = (indexes) => {\r\n    //     indexes.forEach((value) => {\r\n    //         document.getElementById(`boardSpot${value}`).style.backgroundColor = ((index + Math.floor(index / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n    //     })\r\n    // }\r\n\r\n    return (\r\n        <div\r\n            id={`boardSpot${index}`}\r\n            style={{\r\n                width: \"12.5%\",\r\n                textAlign: \"center\",\r\n                margin: \"0px\",\r\n                backgroundColor: currentBackground\r\n            }} >\r\n            <img width=\"100%\" height=\"100%\" src={pieceTranslator(piece)} onClick={() => {\r\n                if (turn === piece[0]) {\r\n                    let valid = possibleMoves(piece, index);\r\n                    if (valid.length === 0) {\r\n                        alert(\"Cannot move that piece\");\r\n                        return;\r\n                    }\r\n                    console.log(valid);\r\n                    // toggleBackground(valid);\r\n                    let userMove = prompt(\"Valid Moves: \" + valid.map(indexToValue));\r\n                    userMove = valueToIndex(userMove);\r\n                    if (valid.includes(userMove)) {\r\n                        move(index, userMove);\r\n                    } else {\r\n                        alert(\"Invalid Choice\");\r\n                        return;\r\n                    }\r\n                    setTurn(turn === \"W\" ? \"B\" : \"W\");\r\n                    // resetBackground(valid);\r\n                } else {\r\n                    if (piece[0] === \" \") {\r\n                        alert(\"Cannot Move Nothing\");\r\n                    } else {\r\n                        alert(\"Not your turn!\");\r\n                    }\r\n                }\r\n            }} />\r\n        </div >\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { BoardSpot } from \"./BoardSpot\";\r\n\r\n\r\nconst fillBoard = () => {\r\n    let tempBoard = Array(64).fill(\" \");\r\n    // Black Pieces\r\n    tempBoard[0] = \"B_R\";\r\n    tempBoard[1] = \"B_N\";\r\n    tempBoard[2] = \"B_B\";\r\n    tempBoard[3] = \"B_Q\";\r\n    tempBoard[4] = \"B_K\";\r\n    tempBoard[5] = \"B_B\";\r\n    tempBoard[6] = \"B_N\";\r\n    tempBoard[7] = \"B_R\";\r\n    tempBoard[8] = \"B_P\";\r\n    tempBoard[9] = \"B_P\";\r\n    tempBoard[10] = \"B_P\";\r\n    tempBoard[11] = \"B_P\";\r\n    tempBoard[12] = \"B_P\";\r\n    tempBoard[13] = \"B_P\";\r\n    tempBoard[14] = \"B_P\";\r\n    tempBoard[15] = \"B_P\";\r\n    // White Pieces\r\n    tempBoard[48] = \"W_P\";\r\n    tempBoard[49] = \"W_P\";\r\n    tempBoard[50] = \"W_P\";\r\n    tempBoard[51] = \"W_P\";\r\n    tempBoard[52] = \"W_P\";\r\n    tempBoard[53] = \"W_P\";\r\n    tempBoard[54] = \"W_P\";\r\n    tempBoard[55] = \"W_P\";\r\n    tempBoard[56] = \"W_R\";\r\n    tempBoard[57] = \"W_N\";\r\n    tempBoard[58] = \"W_B\";\r\n    tempBoard[59] = \"W_Q\";\r\n    tempBoard[60] = \"W_K\";\r\n    tempBoard[61] = \"W_B\";\r\n    tempBoard[62] = \"W_N\";\r\n    tempBoard[63] = \"W_R\";\r\n    return tempBoard\r\n}\r\n\r\nexport const Chessboard = () => {\r\n    const [board, setBoard] = useState(fillBoard());\r\n    const [turn, setTurn] = useState(\"W\");\r\n\r\n    const movePiece = (start, end) => {\r\n        let tempBoard = [...board];\r\n        if (end > 55 && tempBoard[start][2] === \"P\") {\r\n            alert(\"CHANGE OUT PAWN\");\r\n        }\r\n        if (board[end][2] === \"K\") {\r\n            alert(\"Game Over! \" + board[end][0] === \"W\" ? \"White Wins!\" : \"Black Wins!\");\r\n        }\r\n        tempBoard[end] = tempBoard[start];\r\n        tempBoard[start] = \" \";\r\n        setBoard(tempBoard);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"wrap\",\r\n            width: \"70%\",\r\n            margin: \"0 auto\"\r\n        }} >\r\n            {\r\n                board.map((value, index) => {\r\n                    return (\r\n                        <BoardSpot\r\n                            board={board}\r\n                            turn={turn}\r\n                            setTurn={setTurn}\r\n                            move={movePiece}\r\n                            piece={value}\r\n                            index={index}\r\n                            key={\"boardSpot\" + index} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import { Chessboard } from \"./Chessboard\"\r\n\r\nexport const App = () => {\r\n    return (\r\n        <>\r\n            <h1 style={{\r\n                textAlign: \"center\"\r\n            }}>\r\n                Chess\r\n            </h1>\r\n            <Chessboard />\r\n            <p>\r\n                Notes: Very basic prototype currently. Not at all good\r\n            </p>\r\n        </>\r\n    );\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}