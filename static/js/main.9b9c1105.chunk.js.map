{"version":3,"sources":["BoardSpot.jsx","Chessboard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["pieceTranslator","pieceValue","piecePart","split","length","BoardSpot","board","piece","index","move","turn","setTurn","prevIndex","setPrevIndex","currentBackground","Math","floor","toggleBackground","indexes","forEach","value","spot","document","getElementById","style","backgroundColor","onclick","resetBackground","clickPiece","valid","validIndexes","myPiece","enemyPiece","move2","push","move1","attack1","attack2","rookIndex","bishopIndex","dd","uu","ll","rr","d","u","l","r","queenIndex","alert","possibleMoves","id","width","textAlign","margin","height","src","onClick","Chessboard","useState","tempBoard","Array","fill","fillBoard","setBoard","movePiece","start","end","choice","prompt","toUpperCase","includes","window","location","reload","display","flexDirection","flexWrap","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9b9c1105.chunk.js","sourcesContent":["const pieceTranslator = (pieceValue) => {\r\n    const translation = {\r\n        \"W\": {\r\n            \"K\": \"/ChessPieces/WhiteKing.png\",\r\n            \"Q\": \"/ChessPieces/WhiteQueen.png\",\r\n            \"B\": \"/ChessPieces/WhiteBishop.png\",\r\n            \"N\": \"/ChessPieces/WhiteKnight.png\",\r\n            \"R\": \"/ChessPieces/WhiteRook.png\",\r\n            \"P\": \"/ChessPieces/WhitePawn.png\"\r\n        },\r\n        \"B\": {\r\n            \"K\": \"/ChessPieces/BlackKing.png\",\r\n            \"Q\": \"/ChessPieces/BlackQueen.png\",\r\n            \"B\": \"/ChessPieces/BlackBishop.png\",\r\n            \"N\": \"/ChessPieces/BlackKnight.png\",\r\n            \"R\": \"/ChessPieces/BlackRook.png\",\r\n            \"P\": \"/ChessPieces/BlackPawn.png\"\r\n        }\r\n    }\r\n    let piecePart = pieceValue.split(\"_\");\r\n    return pieceValue.length > 2 ? translation[piecePart[0]][piecePart[1]] : \"/ChessPieces/Blank.png\";\r\n}\r\n\r\nexport const BoardSpot = ({ board, piece, index, move, turn, setTurn, prevIndex, setPrevIndex }) => {\r\n    let currentBackground = ((index + Math.floor(index / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n\r\n    const possibleMoves = (pieceValue, index) => {\r\n        let validIndexes = [];\r\n        let myPiece = pieceValue[0];\r\n        let enemyPiece = myPiece === \"W\" ? \"B\" : \"W\";\r\n        switch (pieceValue[2]) {\r\n            case \"P\":\r\n                // First move!\r\n                let firstMove = myPiece === \"W\" ? index > 47 : index < 15;\r\n                if (firstMove) {\r\n                    let move2 = myPiece === \"W\" ? index - 16 : index + 16;\r\n                    if (board[move2][0] === \" \") {\r\n                        validIndexes.push(move2);\r\n                    }\r\n                }\r\n                // Only can move straight forward if empty\r\n                let move1 = myPiece === \"W\" ? index - 8 : index + 8;\r\n                if (board[move1][0] === \" \") {\r\n                    validIndexes.push(move1);\r\n                }\r\n                // Check attack Down Right\r\n                let attack1 = myPiece === \"W\" ? index - 9 : index + 9;\r\n                if (board[attack1][0] === enemyPiece) {\r\n                    validIndexes.push(attack1);\r\n                }\r\n                // Check attack down left\r\n                let attack2 = myPiece === \"W\" ? index - 7 : index + 7;\r\n                if (board[attack2][0] === enemyPiece) {\r\n                    validIndexes.push(attack2);\r\n                }\r\n                break;\r\n            case \"R\":\r\n                let rookIndex = index;\r\n                // Going down\r\n                while (rookIndex < 56) {\r\n                    if (board[rookIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 8);\r\n                    rookIndex += 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going up\r\n                while (rookIndex > 7) {\r\n                    if (board[rookIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 8);\r\n                    rookIndex -= 8;\r\n                }\r\n                rookIndex = index;\r\n                // Going left\r\n                while (rookIndex % 8 !== 0 && rookIndex < 64) {\r\n                    if (board[rookIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex - 1);\r\n                    rookIndex -= 1;\r\n                }\r\n                rookIndex = index;\r\n                // Going right\r\n                while (rookIndex % 8 !== 7 && rookIndex >= 0) {\r\n                    if (board[rookIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[rookIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(rookIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(rookIndex + 1);\r\n                    rookIndex += 1;\r\n                }\r\n                break;\r\n            case \"B\":\r\n                // Down + Right\r\n                let bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 9);\r\n                    bishopIndex += 9;\r\n                }\r\n                // Down + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex < 56) {\r\n                    if (board[bishopIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex + 7);\r\n                    bishopIndex += 7;\r\n                }\r\n                // Up + Right\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 7 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 7);\r\n                    bishopIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                bishopIndex = index;\r\n                while (bishopIndex % 8 !== 0 && bishopIndex > 7) {\r\n                    if (board[bishopIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[bishopIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(bishopIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(bishopIndex - 9);\r\n                    bishopIndex -= 9;\r\n                }\r\n                break;\r\n            case \"N\":\r\n                let knightIndex = index;\r\n                let dd = knightIndex < 48;\r\n                let uu = knightIndex > 15;\r\n                let ll = (knightIndex % 8 !== 0 && knightIndex % 8 !== 1)\r\n                let rr = (knightIndex % 8 !== 6 && knightIndex % 8 !== 7)\r\n                let d = knightIndex < 56;\r\n                let u = knightIndex > 7;\r\n                let l = knightIndex % 8 !== 0;\r\n                let r = knightIndex % 8 !== 7;\r\n                // DDR\r\n                if (dd && r) {\r\n                    if (board[index + 17][0] !== myPiece) {\r\n                        validIndexes.push(index + 17);\r\n                    }\r\n                }\r\n                // DDL\r\n                if (dd && l) {\r\n                    if (board[index + 15][0] !== myPiece) {\r\n                        validIndexes.push(index + 15);\r\n                    }\r\n                }\r\n                // DLL\r\n                if (d & ll) {\r\n                    if (board[index + 6][0] !== myPiece) {\r\n                        validIndexes.push(index + 6);\r\n                    }\r\n                }\r\n                // DRR\r\n                if (d && rr) {\r\n                    if (board[index + 10][0] !== myPiece) {\r\n                        validIndexes.push(index + 10);\r\n                    }\r\n                }\r\n                // UUR\r\n                if (uu && r) {\r\n                    if (board[index - 15][0] !== myPiece) {\r\n                        validIndexes.push(index - 15);\r\n                    }\r\n                }\r\n                // UUL\r\n                if (uu && l) {\r\n                    if (board[index - 17][0] !== myPiece) {\r\n                        validIndexes.push(index - 17);\r\n                    }\r\n                }\r\n                // ULL\r\n                if (u && ll) {\r\n                    if (board[index - 10][0] !== myPiece) {\r\n                        validIndexes.push(index - 10);\r\n                    }\r\n                }\r\n                // URR\r\n                if (u && rr) {\r\n                    if (board[index - 6][0] !== myPiece) {\r\n                        validIndexes.push(index - 6);\r\n                    }\r\n                }\r\n                break;\r\n            case \"Q\":\r\n                let queenIndex = index;\r\n                // Going down\r\n                while (queenIndex < 56) {\r\n                    if (board[queenIndex + 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 8);\r\n                    queenIndex += 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going up\r\n                while (queenIndex > 7) {\r\n                    if (board[queenIndex - 8][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 8][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 8);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 8);\r\n                    queenIndex -= 8;\r\n                }\r\n                queenIndex = index;\r\n                // Going left\r\n                while (queenIndex % 8 !== 0 && queenIndex < 64) {\r\n                    if (board[queenIndex - 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 1);\r\n                    queenIndex -= 1;\r\n                }\r\n                queenIndex = index;\r\n                // Going right\r\n                while (queenIndex % 8 !== 7 && queenIndex >= 0) {\r\n                    if (board[queenIndex + 1][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 1][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 1);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 1);\r\n                    queenIndex += 1;\r\n                }\r\n                // Down + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex < 56) {\r\n                    if (board[queenIndex + 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 9);\r\n                    queenIndex += 9;\r\n                }\r\n                // Down + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex < 56) {\r\n                    if (board[queenIndex + 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex + 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex + 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex + 7);\r\n                    queenIndex += 7;\r\n                }\r\n                // Up + Right\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 7 && queenIndex > 7) {\r\n                    if (board[queenIndex - 7][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 7][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 7);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 7);\r\n                    queenIndex -= 7;\r\n                }\r\n                // Up + Left\r\n                queenIndex = index;\r\n                while (queenIndex % 8 !== 0 && queenIndex > 7) {\r\n                    if (board[queenIndex - 9][0] === myPiece) {\r\n                        break;\r\n                    } else if (board[queenIndex - 9][0] === enemyPiece) {\r\n                        validIndexes.push(queenIndex - 9);\r\n                        break;\r\n                    }\r\n                    validIndexes.push(queenIndex - 9);\r\n                    queenIndex -= 9;\r\n                }\r\n                break;\r\n            case \"K\":\r\n                // UU\r\n                if (index > 7) {\r\n                    if (board[index - 8][0] !== myPiece) {\r\n                        validIndexes.push(index - 8);\r\n                    }\r\n                }\r\n                // UR\r\n                if (index > 7 && index % 8 !== 7) {\r\n                    if (board[index - 7][0] !== myPiece) {\r\n                        validIndexes.push(index - 7);\r\n                    }\r\n                }\r\n                // RR\r\n                if (index % 8 !== 7) {\r\n                    if (board[index + 1][0] !== myPiece) {\r\n                        validIndexes.push(index + 1);\r\n                    }\r\n                }\r\n                // DR\r\n                if (index < 56 && index % 8 !== 7) {\r\n                    if (board[index + 9][0] !== myPiece) {\r\n                        validIndexes.push(index + 9);\r\n                    }\r\n                }\r\n                // DD\r\n                if (index < 56) {\r\n                    if (board[index + 8][0] !== myPiece) {\r\n                        validIndexes.push(index + 8);\r\n                    }\r\n                }\r\n                // DL\r\n                if (index < 56 && index % 8 !== 0) {\r\n                    if (board[index + 7][0] !== myPiece) {\r\n                        validIndexes.push(index + 7);\r\n                    }\r\n                }\r\n                // LL\r\n                if (index % 8 !== 0) {\r\n                    if (board[index - 1][0] !== myPiece) {\r\n                        validIndexes.push(index - 1);\r\n                    }\r\n                }\r\n                // UL\r\n                if (index > 7 && index % 8 !== 0) {\r\n                    if (board[index - 9][0] !== myPiece) {\r\n                        validIndexes.push(index - 9);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                alert(\"RED ALERT\");\r\n        }\r\n        return validIndexes;\r\n    }\r\n\r\n    const pickMovement = (end) => {\r\n        move(index, end);\r\n        setTurn(turn === \"W\" ? \"B\" : \"W\");\r\n    }\r\n\r\n    const toggleBackground = (indexes) => {\r\n        indexes.forEach((value) => {\r\n            let spot = document.getElementById(`boardSpot${value}`);\r\n            spot.style.backgroundColor = \"yellow\";\r\n            spot.onclick = () => {\r\n                pickMovement(value);\r\n                resetBackground(indexes);\r\n            }\r\n        })\r\n    }\r\n\r\n    const resetBackground = (indexes) => {\r\n        indexes.forEach((value) => {\r\n            let spot = document.getElementById(`boardSpot${value}`);\r\n            spot.style.backgroundColor = ((value + Math.floor(value / 8)) % 2 === 0) ? \"white\" : \"grey\";\r\n            spot.onclick = clickPiece;\r\n        })\r\n    }\r\n\r\n    const clickPiece = () => {\r\n        resetBackground(prevIndex);\r\n        if (turn === piece[0]) {\r\n            let valid = possibleMoves(piece, index);\r\n            if (valid.length === 0) {\r\n                alert(\"Cannot move that piece\");\r\n                return;\r\n            }\r\n            setPrevIndex(valid);\r\n            toggleBackground(valid);\r\n            // let userMove = prompt(\"Valid Moves: \" + valid.map(indexToValue));\r\n            // console.log(userMove);\r\n            // userMove = valueToIndex(userMove);\r\n            // console.log(userMove);\r\n            // if (valid.includes(userMove)) {\r\n            //     move(index, userMove);\r\n            // } else {\r\n            //     alert(\"Invalid Choice\");\r\n            //     return;\r\n            // }\r\n            // setTurn(turn === \"W\" ? \"B\" : \"W\");\r\n            // resetBackground(valid);\r\n        } else {\r\n            if (piece[0] === \" \") {\r\n                alert(\"Cannot Move Nothing\");\r\n            } else {\r\n                // alert(\"Not your turn!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id={`boardSpot${index}`}\r\n            style={{\r\n                width: \"12.5%\",\r\n                textAlign: \"center\",\r\n                margin: \"0px\",\r\n                backgroundColor: currentBackground\r\n            }} >\r\n            <img width=\"100%\" height=\"100%\" src={pieceTranslator(piece)} onClick={clickPiece} />\r\n        </div >\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { BoardSpot } from \"./BoardSpot\";\r\n\r\n\r\nconst fillBoard = () => {\r\n    let tempBoard = Array(64).fill(\" \");\r\n    // Black Pieces\r\n    tempBoard[0] = \"B_R\";\r\n    tempBoard[1] = \"B_N\";\r\n    tempBoard[2] = \"B_B\";\r\n    tempBoard[3] = \"B_Q\";\r\n    tempBoard[4] = \"B_K\";\r\n    tempBoard[5] = \"B_B\";\r\n    tempBoard[6] = \"B_N\";\r\n    tempBoard[7] = \"B_R\";\r\n    tempBoard[8] = \"B_P\";\r\n    tempBoard[9] = \"B_P\";\r\n    tempBoard[10] = \"B_P\";\r\n    tempBoard[11] = \"B_P\";\r\n    tempBoard[12] = \"B_P\";\r\n    tempBoard[13] = \"B_P\";\r\n    tempBoard[14] = \"B_P\";\r\n    tempBoard[15] = \"B_P\";\r\n    // White Pieces\r\n    tempBoard[48] = \"W_P\";\r\n    tempBoard[49] = \"W_P\";\r\n    tempBoard[50] = \"W_P\";\r\n    tempBoard[51] = \"W_P\";\r\n    tempBoard[52] = \"W_P\";\r\n    tempBoard[53] = \"W_P\";\r\n    tempBoard[54] = \"W_P\";\r\n    tempBoard[55] = \"W_P\";\r\n    tempBoard[56] = \"W_R\";\r\n    tempBoard[57] = \"W_N\";\r\n    tempBoard[58] = \"W_B\";\r\n    tempBoard[59] = \"W_Q\";\r\n    tempBoard[60] = \"W_K\";\r\n    tempBoard[61] = \"W_B\";\r\n    tempBoard[62] = \"W_N\";\r\n    tempBoard[63] = \"W_R\";\r\n    return tempBoard\r\n}\r\n\r\nexport const Chessboard = ({ turn, setTurn }) => {\r\n    const [board, setBoard] = useState(fillBoard());\r\n    const [prevIndex, setPrevIndex] = useState([]);\r\n\r\n    const movePiece = (start, end) => {\r\n        let tempBoard = [...board];\r\n        if ((end > 55 || end < 8) && tempBoard[start][2] === \"P\") {\r\n            while (true) {\r\n                let choice = prompt(\"Swap out pawn (Q, B, R, N): \");\r\n                choice = choice.toUpperCase();\r\n                if ([\"Q\", \"B\", \"R\", \"N\"].includes(choice)) {\r\n                    tempBoard[end] = tempBoard[start][0] + \"_\" + choice;\r\n                    tempBoard[start] = \" \";\r\n                    setBoard(tempBoard);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (board[end][2] === \"K\") {\r\n            alert(\"Game Over! \" + (board[end][0] === \"B\" ? \"White Wins!\" : \"Black Wins!\"));\r\n            window.location.reload();\r\n        }\r\n        tempBoard[end] = tempBoard[start];\r\n        tempBoard[start] = \" \";\r\n        setBoard(tempBoard);\r\n    }\r\n\r\n    return (\r\n        <div id=\"chessBoard\" style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            flexWrap: \"wrap\",\r\n            width: \"70%\",\r\n            margin: \"0 auto\"\r\n        }} >\r\n            {\r\n                board.map((value, index) => {\r\n                    return (\r\n                        <BoardSpot\r\n                            prevIndex={prevIndex}\r\n                            setPrevIndex={setPrevIndex}\r\n                            board={board}\r\n                            turn={turn}\r\n                            setTurn={setTurn}\r\n                            move={movePiece}\r\n                            piece={value}\r\n                            index={index}\r\n                            key={\"boardSpot\" + index} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import { Chessboard } from \"./Chessboard\"\r\nimport { useState } from \"react\"\r\n\r\nexport const App = () => {\r\n    const [turn, setTurn] = useState(\"W\");\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{\r\n                textAlign: \"center\"\r\n            }}>\r\n                {`Chess: ${turn === \"W\" ? \"White's\" : \"Black's\"} Turn`}\r\n            </h1>\r\n            <Chessboard turn={turn} setTurn={setTurn} />\r\n            <p style={{ textAlign: \"center\" }}>\r\n                <b>Notes</b>: En passant and castling not allowed.\r\n                You are able to move into check, no warnings!\r\n                Win the game by taking the enemy king\r\n            </p>\r\n        </>\r\n    );\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}